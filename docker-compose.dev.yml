# Docker Compose configuration for Almasa Suite development environment
# This file provides all the external services needed for local development

version: '3.8'

services:
  # PostgreSQL database for the server
  postgres:
    image: postgres:15-alpine
    container_name: almasa-postgres-dev
    environment:
      POSTGRES_DB: almasa
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      # Optional: Mount init scripts
      # - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d almasa"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - almasa-dev

  # MinIO for object storage (product images, etc.)
  minio:
    image: minio/minio:latest
    container_name: almasa-minio-dev
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    volumes:
      - minio_dev_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - almasa-dev

  # Redis for caching (optional, for future use)
  redis:
    image: redis:7-alpine
    container_name: almasa-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - almasa-dev

  # Adminer for database management (optional)
  adminer:
    image: adminer:latest
    container_name: almasa-adminer-dev
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - almasa-dev

volumes:
  postgres_dev_data:
    driver: local
  minio_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  almasa-dev:
    driver: bridge
    name: almasa-dev-network

# Usage Instructions:
# 1. Start all services: docker-compose -f docker-compose.dev.yml up -d
# 2. Stop all services: docker-compose -f docker-compose.dev.yml down
# 3. View logs: docker-compose -f docker-compose.dev.yml logs -f [service-name]
# 4. Reset data: docker-compose -f docker-compose.dev.yml down -v
#
# Service URLs:
# - PostgreSQL: localhost:5432 (almasa/postgres/postgres)
# - MinIO API: http://localhost:9000
# - MinIO Console: http://localhost:9001 (minioadmin/minioadmin)
# - Redis: localhost:6379
# - Adminer: http://localhost:8081
#
# Environment variables for server development:
# DB_URL=jdbc:postgresql://localhost:5432/almasa
# DB_USER=postgres
# DB_PASSWORD=postgres
# MINIO_ENDPOINT=http://localhost:9000
# MINIO_ACCESS_KEY=minioadmin
# MINIO_SECRET_KEY=minioadmin